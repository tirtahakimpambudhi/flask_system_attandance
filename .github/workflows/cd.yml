name: Continuous Deploy Workflow

on:
    push:
      branches:
        - master



jobs:
    deploy:
        name: Deploy to VPS
        defaults:
            run:
                shell: bash
        runs-on: ubuntu-latest
        steps:
          - name: 'Checkout repository'
            uses: actions/checkout@v2
          - name: Set up QEMU
            uses: docker/setup-qemu-action@v3
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3
          - name: Login to Docker Hub
            uses: docker/login-action@v2
            with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}
          - name: Build and push
            uses: docker/build-push-action@v6
            with:
                context: .
                file: ./Dockerfile
                push: true
                tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask_system_attandance:latest
          - name: executing remote ssh commands using ssh key
            uses: appleboy/ssh-action@v1.0.3
            with:
                host: ${{ secrets.HOST }}
                username: ${{ secrets.USERNAME }}
                key: ${{ secrets.KEY }}
                port: ${{ secrets.PORT }}
                script: |
                        # Create necessary directories if they don't exist
                        mkdir -p /app/uploads &&
                        mkdir -p /app/logs &&

                        # Pull the latest image from Docker Hub
                        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/flask_system_attandance:latest
              
                        # Check if the container is running, stop and remove it if it exists
                        if [ "$(docker ps -a -q -f name=flask_system_attandance)" ]; then
                            docker container stop flask_system_attandance &&
                            docker container rm flask_system_attandance
                        fi

              
                        # Run the new container
                        && docker run -d \
                          --name flask_system_attandance \
                          -e APP_ENV=${{ secrets.APP_ENV }} \
                          -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
                          -e SUPABASE_API_KEY=${{ secrets.SUPABASE_API_KEY }} \
                          -e SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
                          -e SUPABASE_TABLE=${{ secrets.SUPABASE_TABLE }} \
                          -e SUPABASE_CONNECTION_STRING=${{ secrets.SUPABASE_CONNECTION_STRING }} \
                          -e TIME_OUT_CALL_API=${{ secrets.TIME_OUT_CALL_API }} \
                          -e TIME_INTERVAL_CALL_API=${{ secrets.TIME_INTERVAL_CALL_API }} \
                          -e UPLOAD_PATH=${{ secrets.UPLOAD_PATH }} \
                          -e LOG_PATH=${{ secrets.LOG_PATH }} \
                          -p 5000:5000 \
                          -v /app/uploads:${{ secrets.UPLOAD_PATH }} \
                          -v /app/logs:${{ secrets.LOG_PATH }} \
                          ${{ secrets.DOCKERHUB_USERNAME }}/flask_system_attandance:latest
              
                        # Remove unused images
                        && gdocker image prune -f
        