name: Continuous Deploy Workflow

on:
  push:
    branches:
      - master

jobs:
  build-image:
    name: Build Image and Validate Secrets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GITHUB }}

      - name: Validate Secrets
        run: |
          echo "Validating secrets..."

          if [ -z "${{ secrets.APP_ENV }}" ]; then
            echo "Error: Secret APP_ENV is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.SECRET_KEY }}" ]; then
            echo "Error: Secret SECRET_KEY is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.SUPABASE_API_KEY }}" ]; then
            echo "Error: Secret SUPABASE_API_KEY is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "Error: Secret SUPABASE_URL is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.SUPABASE_TABLE }}" ]; then
            echo "Error: Secret SUPABASE_TABLE is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.SUPABASE_CONNECTION_STRING }}" ]; then
            echo "Error: Secret SUPABASE_CONNECTION_STRING is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.TIME_OUT_CALL_API }}" ]; then
            echo "Error: Secret TIME_OUT_CALL_API is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.TIME_INTERVAL_CALL_API }}" ]; then
            echo "Error: Secret TIME_INTERVAL_CALL_API is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.UPLOAD_PATH }}" ]; then
            echo "Error: Secret UPLOAD_PATH is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.LOG_PATH }}" ]; then
            echo "Error: Secret LOG_PATH is not set or is empty."
            exit 1
          fi

          if [ -z "${{ secrets.TOKEN_GITHUB }}" ]; then
            echo "Error: Secret TOKEN_GITHUB is not set or is empty."
            exit 1
          fi

          echo "All secrets are set and not empty."

      - name: Build and Push Docker Image
        timeout-minutes: 30
        run: |
          docker build . --tag ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:latest
          docker push ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:latest

      - name: Build and Push Docker Image Alpine
        timeout-minutes: 30
        run: |
          docker buildx build -f Dockerfile.alpine -t ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:alpine .
          docker push ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:alpine
          
  pull-image:
    name: Pull Image on VPS
    runs-on: ubuntu-latest
    needs: build-image # Job ini bergantung pada build-image

    steps:

      - name: Remove Old Image in VPS
        timeout-minutes: 30
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
                # Remove Image Lama
                if [ "$(docker ps -a -q -f name=${{ secrets.APP_NAME }})" ]; then
                docker container stop ${{ secrets.APP_NAME }} &&
                sleep 5s &&
                docker container rm ${{ secrets.APP_NAME }}
                else
                echo "No container with the name ${{ secrets.APP_NAME }} exists."
                fi
          
                # Check if the image exists and remove it
                if [ "$(docker images -q ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:alpine)" ]; then
                    echo "Removing the image: ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:alpine"
                    docker image rm ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:alpine
                else
                    echo "No image with the name ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:alpine exists."
                fi

      - name: Pull Image in VPS
        timeout-minutes: 30
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Login ke GitHub Container Registry
            echo '${{ secrets.TOKEN_GITHUB }}' | docker login ghcr.io -u ${{ secrets.USERNAME_GITHUB }} --password-stdin &&
            # Pull image terbaru dari GitHub Container Registry
            docker pull ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:alpine

  run-container:
    name: Run Container on VPS
    runs-on: ubuntu-latest
    needs: pull-image # Job ini bergantung pada pull-image
    steps:

      - name: Run Container In VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            mkdir -p ${{ secrets.APP_LOG_PATH }} ${{ secrets.APP_UPLOAD_PATH }} &&
            if [ "$(docker ps -a -q -f name=${{ secrets.APP_NAME }})" ]; then
              docker container stop ${{ secrets.APP_NAME }} &&
              sleep 5s &&
              docker container rm ${{ secrets.APP_NAME }}
            fi &&

            echo "Create container baru" &&
            docker container run -d \
            --name ${{ secrets.APP_NAME }} \
            -e APP_ENV="${{ secrets.APP_ENV }}" \
            -e APP_PORT=${{ secrets.APP_PORT }} \
            -e APP_HOST="${{ secrets.APP_HOST }}" \
            -e APP_DEBUG=${{ secrets.APP_DEBUG }} \
            -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            -e SUPABASE_API_KEY="${{ secrets.SUPABASE_API_KEY }}" \
            -e SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            -e SUPABASE_TABLE="${{ secrets.SUPABASE_TABLE }}" \
            -e SUPABASE_CONNECTION_STRING="${{ secrets.SUPABASE_CONNECTION_STRING }}" \
            -e TIME_OUT_CALL_API=${{ secrets.TIME_OUT_CALL_API }} \
            -e TIME_INTERVAL_CALL_API=${{ secrets.TIME_INTERVAL_CALL_API }} \
            -e UPLOAD_PATH="${{ secrets.UPLOAD_PATH }}" \
            -e LOG_PATH="${{ secrets.LOG_PATH }}" \
            -v ${{ secrets.VPS_WD}}/${{ secrets.APP_UPLOAD_PATH }}:/${{ secrets.APP_UPLOAD_PATH }} \
            -v ${{ secrets.VPS_WD}}/${{ secrets.APP_LOG_PATH }}:/${{ secrets.APP_LOG_PATH }} \
            -p ${{ secrets.APP_PUBLISH_PORT }}:${{ secrets.APP_PORT }} \
            --cpus "0.5" \
            ghcr.io/${{ secrets.USERNAME_GITHUB }}/${{ secrets.APP_NAME }}:latest
            # TODO ENV RESOURCE LIMIT
            # Menunggu beberapa detik untuk memastikan kontainer berjalan
            sleep 10s
